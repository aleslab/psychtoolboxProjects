function [expInfo] = drawFixation(expInfo, fixationInfo)
% A function to draw fixation crosses, boxes around fixation crosses and an
% apeture to aid fixation.

%% Basic fixation cross



fixCrossDimPix = 20; %the size of the arms of our fixation cross
fixXCoords = [-fixCrossDimPix fixCrossDimPix 0 0]; %fixation cross x coordinates
fixYCoords = [0 0 -fixCrossDimPix fixCrossDimPix]; %fixation cross y coordinates
expInfo.FixCoords = [fixXCoords; fixYCoords]; %combined fixation cross coordinates
expInfo.fixWidthPix = 1; %the line width of the fixation cross
expInfo.fixlw = 1;

if strcmp(fixationInfo.fixationType, 'cross');
    Screen('SelectStereoDrawBuffer', expInfo.curWindow, 0);
    Screen('DrawLines', expInfo.curWindow, expInfo.FixCoords, expInfo.fixWidthPix, 0, expInfo.center, 0);
    Screen('SelectStereoDrawBuffer', expInfo.curWindow, 1);
    Screen('DrawLines', expInfo.curWindow, expInfo.FixCoords, expInfo.fixWidthPix, 0, expInfo.center, 0);
end

%% box surrounding fixation cross when you can make a response

leftPointX = expInfo.center(1) - 30; %x centre is expInfo.center(1)
rightPointX = expInfo.center(1) + 30;
PointY1 = expInfo.center(2) + 30; %y centre is expInfo.center(2)
PointY2 = expInfo.center(2) - 30;

boxXcoords = [leftPointX leftPointX rightPointX rightPointX leftPointX rightPointX leftPointX rightPointX];
boxYcoords = [PointY1 PointY2 PointY1 PointY2 PointY1 PointY1 PointY2 PointY2];
expInfo.boxCoords = [boxXcoords; boxYcoords];

if fixationInfo.responseSquare == 1;
    Screen('SelectStereoDrawBuffer', expInfo.curWindow, 0);
    Screen('DrawLines', expInfo.curWindow, expInfo.boxCoords, expInfo.fixlw, 0);
    Screen('SelectStereoDrawBuffer', expInfo.curWindow, 1);
    Screen('DrawLines', expInfo.curWindow, expInfo.boxCoords, expInfo.fixlw, 0);
end

%% apeture drawing

[screenXpixels, screenYpixels] = Screen('WindowSize', expInfo.curWindow);

if strcmp(fixationInfo.apetureType, 'frame');
    
    rectSize = 100;
    priorSeed = rng; %Save the current rng seed
    rng(1); %setting the random seed of this file to 1 so that the normally 
    %distributed random matrix generated by randn for the left, right, top
    %and bottom rectangle textures below will not change. 
    leftRectMat = randn([screenYpixels, rectSize]);
    rightRectMat = randn([screenYpixels, rectSize]);
    topHorzMat = randn([rectSize, screenXpixels]);
    bottomHorzMat = randn([rectSize, screenXpixels]);
    
    leftRectLocation = [0 0 rectSize screenYpixels];
    rightRectLocation = [(screenXpixels-rectSize) 0 screenXpixels screenYpixels];
    topRectLocation = [0 0 screenXpixels rectSize]; %this draws the top rectangle along the entire length of the top of the screen
    bottomRectLocation = [0 (screenYpixels-rectSize) screenXpixels screenYpixels];
    allLocations = [leftRectLocation; rightRectLocation; topRectLocation; bottomRectLocation]';
    
    leftRectTexture = Screen('MakeTexture', expInfo.curWindow, leftRectMat); 
    rightRectTexture = Screen('MakeTexture', expInfo.curWindow, rightRectMat);
    topHorzTexture = Screen('MakeTexture', expInfo.curWindow, topHorzMat);
    bottomHorzTexture = Screen('MakeTexture', expInfo.curWindow, bottomHorzMat);
    expInfo.fixationTextures = [leftRectTexture; rightRectTexture; topHorzTexture; bottomHorzTexture];
    
    Screen('SelectStereoDrawBuffer', expInfo.curWindow, 0);
    Screen('DrawTextures', expInfo.curWindow, expInfo.fixationTextures, [], [allLocations]);
    Screen('SelectStereoDrawBuffer', expInfo.curWindow, 1);
    Screen('DrawTextures', expInfo.curWindow, expInfo.fixationTextures, [], [allLocations]);
end
rng(priorSeed);            % restore the generator settings
end



